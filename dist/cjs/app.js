"use strict";var e=require("./node_modules/.pnpm/@rollup_plugin-typescript@1_4cb859db7663cf55b6eaf4302f855b65/node_modules/tslib/tslib.es6.js"),t=require("express"),i=require("inversify"),r=require("helmet"),s=require("morgan"),a=require("./types/constants.js");exports.App=class{constructor(e,i,r,s,a,n,o,c){this.config=e,this.logger=i,this.createSession=r,this.serverFactory=s,this.gracefulExit=a,this.globalMiddlewares=n,this.dataSource=o,this.redis=c,this.app=t(),this.server=null,this.globalMiddlewares.init(this.app)}async bootstrap(e){if(this.server)return this.server;const{config:t,logger:i,dataSource:r,redis:s}=this;try{await this.initialize();const a=await this.serverFactory(this.app);return this.server=await a.bootstrap(e||t.port),this.gracefulExit.register(this.server).setHealthCheck({"/health":async()=>({timestamp:(new Date).toISOString(),db:r?.isInitialized?"connected":"disconnected",redis:s?.status})}),i.info(`üöÄ Server running on http://localhost:${e||t.port}`),this.server}catch(e){throw i.error("‚ùå Failed to start server:",e),e}}use(...e){this.globalMiddlewares.register(...e)}async initialize(){try{await Promise.all([this.initDatabase(),this.initRedis(),this.cinfigGlobalMiddlewares()]),await this.configSession()}catch(e){throw this.logger.error("‚ùå Failed to initialize",e),e}}async initDatabase(){const{config:e,dataSource:t,logger:i,gracefulExit:r}=this;try{if(!t||!1===e.db.enable||t.isInitialized)return;await t.initialize(),i.info("‚úÖ Database connected"),r.addCleanupTask(async()=>{await t.destroy(),i.info("‚úÖ Database connection closed")})}catch(e){throw i.error("‚ùå Failed to connect to database",e),e}}async initRedis(){const{config:e,redis:t,logger:i,gracefulExit:r}=this;try{if(!t||!1===e.redis.enable)return;if("wait"!==t.status)return;await t.connect(),i.info("‚úÖ Redis connected"),r.addCleanupTask(async()=>{await t.quit(),i.info("‚úÖ Redis connection closed")})}catch(e){throw i.error("‚ùå Failed to connect to Redis",e),e}}async configSession(){const{createSession:e,config:t,logger:i,globalMiddlewares:r}=this;try{const{enable:s,type:a,prefix:n}=t.session;if(!1===s)return;if("redis"===a){if(!this.redis)throw new Error("Redis is required");e.setRedis(n,this.redis)}const o=e.getHandler();r.register(o),i.info(`‚úÖ Session set with ${a} store`)}catch(e){throw i.error("‚ùå Failed to config session:",e),e}}async cinfigGlobalMiddlewares(){this.globalMiddlewares.register(t.urlencoded({extended:!0}),r(),s("dev"))}},exports.App=e.__decorate([i.injectable("Singleton"),e.__param(0,i.inject(a.SYMBOLS.Config)),e.__param(1,i.inject(a.SYMBOLS.Logger)),e.__param(2,i.inject(a.SYMBOLS.CreateSession)),e.__param(3,i.inject(a.SYMBOLS.CreateServer)),e.__param(4,i.inject(a.SYMBOLS.GracefulExit)),e.__param(5,i.inject(a.SYMBOLS.GlobalMiddlewares)),e.__param(6,i.inject(a.SYMBOLS.DataSource)),e.__param(7,i.inject(a.SYMBOLS.Redis)),e.__metadata("design:paramtypes",[Object,Function,Object,Function,Object,Object,Function,Function])],exports.App);
//# sourceMappingURL=app.js.map
